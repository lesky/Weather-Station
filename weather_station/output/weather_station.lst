FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 04 D6 LJMP  _SleepTimer_ISR    (0185)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 31    MOV   A,0x31             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+199],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+200],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 04 66 LCALL 0x0466             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 08 16 MOV   [__r0],0x16        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 08 31 CMP   [__r0],0x31        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 08    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 03    MOV   A,0x3              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 9F    MOV   X,0x9F             (0368)     mov  X,<__idata_start
00AC: 55 08 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 08 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 08    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 08 90 LCALL __UserModules_end|_main|__text_start|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
03A1: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_weather_station_Bank1
                                        (0006) export LoadConfigTBL_weather_station_Bank0
                                        (0007) export LoadConfigTBL_weather_station_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_weather_station_Bank0:
                                        (0010) ;  Instance name I2Cm, User Module I2Cm
                                        (0011) ;  Instance name LCD, User Module LCD
                                        (0012) ;  Instance name PGA_rain, User Module PGA
                                        (0013) ;       Instance name PGA_rain, Block Name GAIN(ACB02)
                                        (0014) 	db		79h, 0eh		;PGA_rain_GAIN_CR0(ACB02CR0)
                                        (0015) 	db		7ah, 21h		;PGA_rain_GAIN_CR1(ACB02CR1)
                                        (0016) 	db		7bh, 20h		;PGA_rain_GAIN_CR2(ACB02CR2)
                                        (0017) 	db		78h, 00h		;PGA_rain_GAIN_CR3(ACB02CR3)
                                        (0018) ;  Instance name PGA_sun, User Module PGA
                                        (0019) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0020) 	db		75h, 0eh		;PGA_sun_GAIN_CR0(ACB01CR0)
                                        (0021) 	db		76h, 21h		;PGA_sun_GAIN_CR1(ACB01CR1)
                                        (0022) 	db		77h, 20h		;PGA_sun_GAIN_CR2(ACB01CR2)
                                        (0023) 	db		74h, 00h		;PGA_sun_GAIN_CR3(ACB01CR3)
                                        (0024) ;  Instance name PGA_wind, User Module PGA
                                        (0025) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0026) 	db		71h, 0eh		;PGA_wind_GAIN_CR0(ACB00CR0)
                                        (0027) 	db		72h, 21h		;PGA_wind_GAIN_CR1(ACB00CR1)
                                        (0028) 	db		73h, 20h		;PGA_wind_GAIN_CR2(ACB00CR2)
                                        (0029) 	db		70h, 00h		;PGA_wind_GAIN_CR3(ACB00CR3)
                                        (0030) ;  Instance name SAR6_rain, User Module SAR6
                                        (0031) ;       Instance name SAR6_rain, Block Name SA(ASC12)
                                        (0032) 	db		88h, 00h		;SAR6_rain_CR0(ASC12CR0)
                                        (0033) 	db		89h, 5fh		;SAR6_rain_CR1(ASC12CR1)
                                        (0034) 	db		8ah, 60h		;SAR6_rain_CR2(ASC12CR2)
                                        (0035) 	db		8bh, 00h		;SAR6_rain_CR3(ASC12CR3)
                                        (0036) ;  Instance name SAR6_sun, User Module SAR6
                                        (0037) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0038) 	db		84h, 00h		;SAR6_sun_CR0(ASD11CR0)
                                        (0039) 	db		85h, 9fh		;SAR6_sun_CR1(ASD11CR1)
                                        (0040) 	db		86h, 60h		;SAR6_sun_CR2(ASD11CR2)
                                        (0041) 	db		87h, 0ch		;SAR6_sun_CR3(ASD11CR3)
                                        (0042) ;  Instance name SAR6_wind, User Module SAR6
                                        (0043) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0044) 	db		80h, 00h		;SAR6_wind_CR0(ASC10CR0)
                                        (0045) 	db		81h, 5fh		;SAR6_wind_CR1(ASC10CR1)
                                        (0046) 	db		82h, 60h		;SAR6_wind_CR2(ASC10CR2)
                                        (0047) 	db		83h, 00h		;SAR6_wind_CR3(ASC10CR3)
                                        (0048) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0049) ;  Global Register values Bank 0
                                        (0050) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0051) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0052) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0053) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0054) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0055) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0056) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0057) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0058) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0059) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0060) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0061) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0062) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0063) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0064) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0065) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0066) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0067) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0068) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0069) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0070) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0071) 	db		ffh
                                        (0072) LoadConfigTBL_weather_station_Bank1:
                                        (0073) ;  Instance name I2Cm, User Module I2Cm
                                        (0074) ;  Instance name LCD, User Module LCD
                                        (0075) ;  Instance name PGA_rain, User Module PGA
                                        (0076) ;       Instance name PGA_rain, Block Name GAIN(ACB02)
                                        (0077) ;  Instance name PGA_sun, User Module PGA
                                        (0078) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0079) ;  Instance name PGA_wind, User Module PGA
                                        (0080) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0081) ;  Instance name SAR6_rain, User Module SAR6
                                        (0082) ;       Instance name SAR6_rain, Block Name SA(ASC12)
                                        (0083) ;  Instance name SAR6_sun, User Module SAR6
                                        (0084) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0085) ;  Instance name SAR6_wind, User Module SAR6
                                        (0086) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0087) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0088) ;  Global Register values Bank 1
                                        (0089) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0090) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0091) 	db		60h, 15h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0092) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0093) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0094) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0095) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0096) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0097) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0098) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0099) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0100) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0101) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0102) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0103) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0104) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0105) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0106) 	db		ffh
                                        (0107) AREA psoc_config(rom, rel)
                                        (0108) LoadConfigTBL_weather_station_Ordered:
                                        (0109) ;  Ordered Global Register values
                                        (0110) 	M8C_SetBank0
03A3: 62 00 00 MOV   REG[0x0],0x0       (0111) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03A6: 71 10    OR    F,0x10             
                                        (0112) 	M8C_SetBank1
03A8: 62 00 03 MOV   REG[0x0],0x3       (0113) 	mov	reg[00h], 03h		; Port_0_DriveMode_0 register (PRT0DM0)
03AB: 62 01 F8 MOV   REG[0x1],0xF8      (0114) 	mov	reg[01h], f8h		; Port_0_DriveMode_1 register (PRT0DM1)
03AE: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
03B0: 62 03 38 MOV   REG[0x3],0x38      (0116) 	mov	reg[03h], 38h		; Port_0_DriveMode_2 register (PRT0DM2)
03B3: 62 02 00 MOV   REG[0x2],0x0       (0117) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
03B6: 71 10    OR    F,0x10             
                                        (0118) 	M8C_SetBank1
03B8: 62 02 00 MOV   REG[0x2],0x0       (0119) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03BB: 62 03 00 MOV   REG[0x3],0x0       (0120) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
03BE: 70 EF    AND   F,0xEF             
                                        (0121) 	M8C_SetBank0
03C0: 62 01 00 MOV   REG[0x1],0x0       (0122) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
03C3: 62 04 00 MOV   REG[0x4],0x0       (0123) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
03C6: 71 10    OR    F,0x10             
                                        (0124) 	M8C_SetBank1
03C8: 62 04 00 MOV   REG[0x4],0x0       (0125) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
03CB: 62 05 FF MOV   REG[0x5],0xFF      (0126) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
03CE: 70 EF    AND   F,0xEF             
                                        (0127) 	M8C_SetBank0
03D0: 62 07 FF MOV   REG[0x7],0xFF      (0128) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
03D3: 62 06 00 MOV   REG[0x6],0x0       (0129) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
03D6: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
03D8: 62 06 00 MOV   REG[0x6],0x0       (0131) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
03DB: 62 07 00 MOV   REG[0x7],0x0       (0132) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
03DE: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
03E0: 62 05 00 MOV   REG[0x5],0x0       (0134) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
03E3: 62 08 00 MOV   REG[0x8],0x0       (0135) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
03E6: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
03E8: 62 08 7F MOV   REG[0x8],0x7F      (0137) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
03EB: 62 09 80 MOV   REG[0x9],0x80      (0138) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
03EE: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
03F0: 62 0B 80 MOV   REG[0xB],0x80      (0140) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
03F3: 62 0A 00 MOV   REG[0xA],0x0       (0141) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
03F6: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
03F8: 62 0A 00 MOV   REG[0xA],0x0       (0143) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
03FB: 62 0B 00 MOV   REG[0xB],0x0       (0144) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
03FE: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
0400: 62 09 00 MOV   REG[0x9],0x0       (0146) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0403: 62 0C 00 MOV   REG[0xC],0x0       (0147) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0406: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
0408: 62 0C 00 MOV   REG[0xC],0x0       (0149) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
040B: 62 0D 00 MOV   REG[0xD],0x0       (0150) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
040E: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
0410: 62 0F 00 MOV   REG[0xF],0x0       (0152) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0413: 62 0E 00 MOV   REG[0xE],0x0       (0153) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0416: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
0418: 62 0E 00 MOV   REG[0xE],0x0       (0155) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
041B: 62 0F 00 MOV   REG[0xF],0x0       (0156) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
041E: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
0420: 62 0D 00 MOV   REG[0xD],0x0       (0158) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0423: 62 10 00 MOV   REG[0x10],0x0      (0159) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0426: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
0428: 62 10 00 MOV   REG[0x10],0x0      (0161) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
042B: 62 11 00 MOV   REG[0x11],0x0      (0162) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
042E: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0430: 62 13 00 MOV   REG[0x13],0x0      (0164) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0433: 62 12 00 MOV   REG[0x12],0x0      (0165) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0436: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
0438: 62 12 00 MOV   REG[0x12],0x0      (0167) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
043B: 62 13 00 MOV   REG[0x13],0x0      (0168) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
043E: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0440: 62 11 00 MOV   REG[0x11],0x0      (0170) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0443: 62 14 00 MOV   REG[0x14],0x0      (0171) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0446: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
0448: 62 14 00 MOV   REG[0x14],0x0      (0173) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
044B: 62 15 00 MOV   REG[0x15],0x0      (0174) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
044E: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
0450: 62 17 00 MOV   REG[0x17],0x0      (0176) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0453: 62 16 00 MOV   REG[0x16],0x0      (0177) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0456: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
0458: 62 16 00 MOV   REG[0x16],0x0      (0179) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
045B: 62 17 00 MOV   REG[0x17],0x0      (0180) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
045E: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
0460: 62 15 00 MOV   REG[0x15],0x0      (0182) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0463: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
0465: 7F       RET                      (0184) 	ret
                                        (0185) 
                                        (0186) 
                                        (0187) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_weather_station
                                        (0026) export _LoadConfig_weather_station
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) export Port_2_DriveMode_0_SHADE
                                        (0036) export _Port_2_DriveMode_0_SHADE
                                        (0037) export Port_2_DriveMode_1_SHADE
                                        (0038) export _Port_2_DriveMode_1_SHADE
                                        (0039) 
                                        (0040) 
                                        (0041) export NO_SHADOW
                                        (0042) export _NO_SHADOW
                                        (0043) 
                                        (0044) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0045) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0046) 
                                        (0047) AREA psoc_config(rom, rel)
                                        (0048) 
                                        (0049) ;---------------------------------------------------------------------------
                                        (0050) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0051) ;                  parameters handled by boot code, like CPU speed). This
                                        (0052) ;                  function can be called from user code, but typically it
                                        (0053) ;                  is only called from boot.
                                        (0054) ;
                                        (0055) ;       INPUTS: None.
                                        (0056) ;      RETURNS: Nothing.
                                        (0057) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0058) ;               In the large memory model currently only the page
                                        (0059) ;               pointer registers listed below are modified.  This does
                                        (0060) ;               not guarantee that in future implementations of this
                                        (0061) ;               function other page pointer registers will not be
                                        (0062) ;               modified.
                                        (0063) ;          
                                        (0064) ;               Page Pointer Registers Modified: 
                                        (0065) ;               CUR_PP
                                        (0066) ;
                                        (0067) _LoadConfigInit:
                                        (0068)  LoadConfigInit:
                                        (0069)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0070)     
0466: 55 10 00 MOV   [0x10],0x0         (0071) 	mov		[Port_0_Data_SHADE], 0h
0469: 55 12 03 MOV   [0x12],0x3         (0072) 	mov		[Port_0_DriveMode_0_SHADE], 3h
046C: 55 13 F8 MOV   [0x13],0xF8        (0073) 	mov		[Port_0_DriveMode_1_SHADE], f8h
046F: 55 11 00 MOV   [0x11],0x0         (0074) 	mov		[Port_2_Data_SHADE], 0h
0472: 55 14 7F MOV   [0x14],0x7F        (0075) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0475: 55 15 80 MOV   [0x15],0x80        (0076) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0077) 
0478: 7C 04 7F LCALL 0x047F             (0078) 	lcall	LoadConfig_weather_station
047B: 7C 03 A1 LCALL 0x03A1             (0079) 	lcall	LoadConfigTBL_weather_station_Ordered
                                        (0080) 
                                        (0081) 
                                        (0082)     RAM_EPILOGUE RAM_USE_CLASS_4
047E: 7F       RET                      (0083)     ret
                                        (0084) 
                                        (0085) ;---------------------------------------------------------------------------
                                        (0086) ; Load Configuration weather_station
                                        (0087) ;
                                        (0088) ;    Load configuration registers for weather_station.
                                        (0089) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0090) ;
                                        (0091) ;       INPUTS: None.
                                        (0092) ;      RETURNS: Nothing.
                                        (0093) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0094) ;               modified as may the Page Pointer registers!
                                        (0095) ;               In the large memory model currently only the page
                                        (0096) ;               pointer registers listed below are modified.  This does
                                        (0097) ;               not guarantee that in future implementations of this
                                        (0098) ;               function other page pointer registers will not be
                                        (0099) ;               modified.
                                        (0100) ;          
                                        (0101) ;               Page Pointer Registers Modified: 
                                        (0102) ;               CUR_PP
                                        (0103) ;
                                        (0104) _LoadConfig_weather_station:
                                        (0105)  LoadConfig_weather_station:
                                        (0106)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0107) 
047F: 10       PUSH  X                  (0108) 	push	x
0480: 70 EF    AND   F,0xEF             
                                        (0109)     M8C_SetBank0                    ; Force bank 0
0482: 50 00    MOV   A,0x0              (0110)     mov     a, 0                    ; Specify bank 0
0484: 67       ASR   A                  (0111)     asr     a                       ; Store in carry flag
                                        (0112)                                     ; Load bank 0 table:
0485: 50 01    MOV   A,0x1              (0113)     mov     A, >LoadConfigTBL_weather_station_Bank0
0487: 57 AC    MOV   X,0xAC             (0114)     mov     X, <LoadConfigTBL_weather_station_Bank0
0489: 7C 04 9A LCALL 0x049A             (0115)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0116) 
048C: 50 01    MOV   A,0x1              (0117)     mov     a, 1                    ; Specify bank 1
048E: 67       ASR   A                  (0118)     asr     a                       ; Store in carry flag
                                        (0119)                                     ; Load bank 1 table:
048F: 50 02    MOV   A,0x2              (0120)     mov     A, >LoadConfigTBL_weather_station_Bank1
0491: 57 07    MOV   X,0x7              (0121)     mov     X, <LoadConfigTBL_weather_station_Bank1
0493: 7C 04 9A LCALL 0x049A             (0122)     lcall   LoadConfig              ; Load the bank 1 values
0496: 70 EF    AND   F,0xEF             
                                        (0123) 
                                        (0124)     M8C_SetBank0                    ; Force return to bank 0
0498: 20       POP   X                  (0125) 	pop		x
                                        (0126) 
                                        (0127)     RAM_EPILOGUE RAM_USE_CLASS_4
0499: 7F       RET                      (0128)     ret
                                        (0129) 
                                        (0130) 
                                        (0131) 
                                        (0132) 
                                        (0133) ;---------------------------------------------------------------------------
                                        (0134) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0135) ;              pairs. Terminate on address=0xFF.
                                        (0136) ;
                                        (0137) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0138) ;           Flag Register Carry bit encodes the Register Bank
                                        (0139) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0140) ;
                                        (0141) ;  RETURNS: nothing.
                                        (0142) ;
                                        (0143) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0144) ;                X-3 Temporary store for register address
                                        (0145) ;                X-2 LSB of config table address
                                        (0146) ;                X-1 MSB of config table address
                                        (0147) ;
                                        (0148) LoadConfig:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
049A: 38 02    ADD   SP,0x2             (0150)     add     SP, 2                   ; Set up local vars
049C: 10       PUSH  X                  (0151)     push    X                       ; Save config table address on stack
049D: 08       PUSH  A                  (0152)     push    A
049E: 4F       MOV   X,SP               (0153)     mov     X, SP
049F: 56 FC 00 MOV   [X-4],0x0          (0154)     mov     [X-4], 0                ; Set default Destination to Bank 0
04A2: D0 04    JNC   0x04A7             (0155)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
04A4: 56 FC 01 MOV   [X-4],0x1          (0156)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0157) .BankSelectSaved:
04A7: 18       POP   A                  (0158)     pop     A
04A8: 20       POP   X                  (0159)     pop     X
04A9: 70 EF    AND   F,0xEF             
04AB: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0160) 
                                        (0161) LoadConfigLp:
                                        (0162)     M8C_SetBank0                    ; Switch to bank 0
                                        (0163)     M8C_ClearWDT                    ; Clear the watchdog for long inits
04AE: 10       PUSH  X                  (0164)     push    X                       ; Preserve the config table address
04AF: 08       PUSH  A                  (0165)     push    A
04B0: 28       ROMX                     (0166)     romx                            ; Load register address from table
04B1: 39 FF    CMP   A,0xFF             (0167)     cmp     A, END_CONFIG_TABLE     ; End of table?
04B3: A0 1F    JZ    0x04D3             (0168)     jz      EndLoadConfig           ;   Yes, go wrap it up
04B5: 4F       MOV   X,SP               (0169)     mov     X, SP                   ;
04B6: 48 FC 01 TST   [X-4],0x1          (0170)     tst     [X-4], 1                ; Loading IO Bank 1?
04B9: A0 03    JZ    0x04BD             (0171)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
04BB: 71 10    OR    F,0x10             
                                        (0172)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0173) .IOBankNowSet:
04BD: 54 FD    MOV   [X-3],A            (0174)     mov     [X-3], A                ; Stash the register address
04BF: 18       POP   A                  (0175)     pop     A                       ; Retrieve the table address
04C0: 20       POP   X                  (0176)     pop     X
04C1: 75       INC   X                  (0177)     inc     X                       ; Advance to the data byte
04C2: 09 00    ADC   A,0x0              (0178)     adc     A, 0
04C4: 10       PUSH  X                  (0179)     push    X                       ; Save the config table address again
04C5: 08       PUSH  A                  (0180)     push    A
04C6: 28       ROMX                     (0181)     romx                            ; load config data from the table
04C7: 4F       MOV   X,SP               (0182)     mov     X, SP                   ; retrieve the register address
04C8: 59 FD    MOV   X,[X-3]            (0183)     mov     X, [X-3]
04CA: 61 00    MOV   REG[X+0x0],A       (0184)     mov     reg[X], A               ; Configure the register
04CC: 18       POP   A                  (0185)     pop     A                       ; retrieve the table address
04CD: 20       POP   X                  (0186)     pop     X
04CE: 75       INC   X                  (0187)     inc     X                       ; advance to next table entry
04CF: 09 00    ADC   A,0x0              (0188)     adc     A, 0
04D1: 8F D7    JMP   0x04A9             (0189)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0190) EndLoadConfig:
04D3: 38 FC    ADD   SP,0xFC            (0191)     add     SP, -4
                                        (0192)     RAM_EPILOGUE RAM_USE_CLASS_2
04D5: 7F       RET                      (0193)     ret
                                        (0194) 
                                        (0195) AREA InterruptRAM(ram, rel)
                                        (0196) 
                                        (0197) NO_SHADOW:
                                        (0198) _NO_SHADOW:
                                        (0199) ; write only register shadows
                                        (0200) _Port_0_Data_SHADE:
                                        (0201) Port_0_Data_SHADE:	BLK	1
                                        (0202) _Port_2_Data_SHADE:
                                        (0203) Port_2_Data_SHADE:	BLK	1
                                        (0204) _Port_0_DriveMode_0_SHADE:
                                        (0205) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0206) _Port_0_DriveMode_1_SHADE:
                                        (0207) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0208) _Port_2_DriveMode_0_SHADE:
                                        (0209) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0210) _Port_2_DriveMode_1_SHADE:
                                        (0211) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0212) 
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
04D6: 2E 09 01 OR    [0x9],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
04D9: 47 0B FF TST   [0xB],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
04DC: A0 03    JZ    0x04E0             (0095)    jz   .DoTimer
04DE: 7A 0B    DEC   [0xB]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
04E0: 47 0A FF TST   [0xA],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
04E3: A0 03    JZ    0x04E7             (0100)    jz   .IncBigCounter
04E5: 7A 0A    DEC   [0xA]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
04E7: 76 0F    INC   [0xF]              (0105)    inc  [SleepTimer_TickCount+3]
04E9: D0 0B    JNC   0x04F5             (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
04EB: 76 0E    INC   [0xE]              (0108)    inc  [SleepTimer_TickCount+2]
04ED: D0 07    JNC   0x04F5             (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
04EF: 76 0D    INC   [0xD]              (0113)    inc  [SleepTimer_TickCount+1]
04F1: D0 03    JNC   0x04F5             (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
04F3: 76 0C    INC   [0xC]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
04F5: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
04F6: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2012/3/2 at 9:15:13
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
04F9: 7F       RET                      (0135)    ret
04FA: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
04FD: 7F       RET                      (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
04FE: 50 00    MOV   A,0x0              (0198)    mov  A,0
0500: 53 09    MOV   [0x9],A            (0199)    mov  [SleepTimer_fTick],A
0502: 53 0A    MOV   [0xA],A            (0200)    mov  [SleepTimer_bTimerValue],A
0504: 53 0B    MOV   [0xB],A            (0201)    mov  [SleepTimer_bCountDown],A
0506: 53 0F    MOV   [0xF],A            (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
0508: 53 0E    MOV   [0xE],A            (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
050A: 53 0D    MOV   [0xD],A            (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
050C: 53 0C    MOV   [0xC],A            (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
050E: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
050F: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
0510: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
0512: 4F       MOV   X,SP               (0270)    mov  X, SP
0513: 08       PUSH  A                  (0271)    push A
0514: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
0516: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
0518: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
051A: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
051C: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
051E: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
0520: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
0521: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
0522: 55 09 00 MOV   [0x9],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
0525: 47 09 FF TST   [0x9],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
0528: AF FC    JZ    0x0525             (0319)    jz    .WaitTick
052A: 55 09 00 MOV   [0x9],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
052D: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
052E: BF F6    JNZ   0x0525             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0530: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
0531: 4B       SWAP  A,X                (0366)    swap  A,X
0532: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
0534: B0 06    JNZ   0x053B             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
0536: 47 0B FF TST   [0xB],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
0539: BF FC    JNZ   0x0536             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
053B: 4B       SWAP  A,X                (0376)    swap  A,X
053C: 53 0B    MOV   [0xB],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
053E: 7F       RET                      (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
053F: 51 0F    MOV   A,[0xF]            (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0541: 7F       RET                      (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0542: 53 0A    MOV   [0xA],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0544: 7F       RET                      (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0545: 51 0A    MOV   A,[0xA]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
0547: 7F       RET                      (0490)    ret
0548: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
054B: 51 0F    MOV   A,[0xF]            (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
054D: 58 0E    MOV   X,[0xE]            (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
054F: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
0552: 7F       RET                      (0533)    ret
0553: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
0556: 08       PUSH  A                  (0573)    push  A
0557: 51 0C    MOV   A,[0xC]            (0574)    mov   A,[SleepTimer_TickCount + 0]
0559: 54 00    MOV   [X+0],A            (0575)    mov   [X + 0],A
055B: 51 0D    MOV   A,[0xD]            (0576)    mov   A,[SleepTimer_TickCount + 1]
055D: 54 01    MOV   [X+1],A            (0577)    mov   [X + 1],A
055F: 51 0E    MOV   A,[0xE]            (0578)    mov   A,[SleepTimer_TickCount + 2]
0561: 54 02    MOV   [X+2],A            (0579)    mov   [X + 2],A
0563: 51 0F    MOV   A,[0xF]            (0580)    mov   A,[SleepTimer_TickCount + 3]
0565: 54 03    MOV   [X+3],A            (0581)    mov   [X + 3],A
0567: 18       POP   A                  (0582)    pop   A
0568: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
056B: 7F       RET                      (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\sar6_sun.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SAR6_sun.asm
                                        (0004) ;;  Version: 1.5, Updated on 2012/3/2 at 9:15:12
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SAR6 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SAR6_sun.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  SAR6_sun_Start
                                        (0021) export _SAR6_sun_Start
                                        (0022) export  SAR6_sun_SetPower
                                        (0023) export _SAR6_sun_SetPower
                                        (0024) export  SAR6_sun_cGetSample
                                        (0025) export _SAR6_sun_cGetSample
                                        (0026) export  SAR6_sun_Stop
                                        (0027) export _SAR6_sun_Stop
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ; WARNING! These exports will be removed in
                                        (0032) ; a future release.
                                        (0033) ;-----------------------------------------------
                                        (0034) export  SAR6_sun_GetSample
                                        (0035) export _SAR6_sun_GetSample
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;-----------------------------------------------
                                        (0040) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0041) 
                                        (0042) AREA UserModules (ROM, REL)
                                        (0043) 
                                        (0044) .SECTION
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: SAR6_sun_Start
                                        (0047) ;  FUNCTION NAME: SAR6_sun_SetPower
                                        (0048) ;
                                        (0049) ;  DESCRIPTION:
                                        (0050) ;     Applies power setting to the module's SoCblocs
                                        (0051) ;
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;
                                        (0054) ;  ARGUMENTS:
                                        (0055) ;    A   contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0056) ;
                                        (0057) ;  RETURNS:  NA
                                        (0058) ;
                                        (0059) ;  SIDE EFFECTS:
                                        (0060) ;    The A and X registers may be modified by this or future implementations
                                        (0061) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0062) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0063) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0064) ;    functions.
                                        (0065) ;
                                        (0066)  SAR6_sun_Start:
                                        (0067) _SAR6_sun_Start:
                                        (0068)     ;; Initialization-time only code goes here.
                                        (0069) 
                                        (0070)  SAR6_sun_SetPower:
                                        (0071) _SAR6_sun_SetPower:
                                        (0072)     RAM_PROLOGUE RAM_USE_CLASS_2
056C: 21 03    AND   A,0x3              (0073)     and   A, bPWRMASK       ; trim to bits of interest
056E: 4F       MOV   X,SP               (0074)     mov   X, SP             ; Set stack frame pointer
056F: 08       PUSH  A                  (0075)     push  A
                                        (0076) 
                                        (0077)     ;; read CR3 register, modify power bits & write back
0570: 5D 87    MOV   A,REG[0x87]        (0078)     mov   A, reg[SAR6_sun_CR3]
0572: 21 FC    AND   A,0xFC             (0079)     and   A, ~bPWRMASK      ; clear old setting
0574: 2B 00    OR    A,[X+0]            (0080)     or    A, [X]            ; set power in register image
0576: 60 87    MOV   REG[0x87],A        (0081)     mov   reg[SAR6_sun_CR3], A
0578: 18       POP   A                  (0082)     pop   A
                                        (0083)     RAM_EPILOGUE RAM_USE_CLASS_2
0579: 7F       RET                      (0084)     ret
                                        (0085) .ENDSECTION
                                        (0086) 
                                        (0087) .SECTION
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;  FUNCTION NAME: SAR6_sun_cGetSample
                                        (0090) ;
                                        (0091) ;  DESCRIPTION:
                                        (0092) ;    Utilize SAR acceleration hardware to guide a binary search
                                        (0093) ;    until the output of the 6-bit DAC output is within 1 bit of the
                                        (0094) ;    input voltage.
                                        (0095) ;
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;
                                        (0100) ;  RETURNS:
                                        (0101) ;    A   2's Complement Value in [-32..+31]
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110) PSOC_ANALOG_COL_MASK:  equ 0Ch ; mask for column bits in analog reg address
                                        (0111) PSOC_SAR_CTRL:         equ 68h ;
                                        (0112) PSOC_SAR_MAGNITUDE:    equ 1Fh ;
                                        (0113) PSOC_SAR_SIGN:         equ 20h ;
                                        (0114) 
                                        (0115)  SAR6_sun_cGetSample:
                                        (0116) _SAR6_sun_cGetSample:
                                        (0117)  SAR6_sun_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0118) _SAR6_sun_GetSample:  ; WARNING, this label will be removed in a future release.
                                        (0119)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0120) 
                                        (0121)     ; These three lines of code are VERY important to ensure proper SAR6 operation.
                                        (0122)     ; 1) The first line will make sure the CPU is stalled when a value is written
                                        (0123)     ;    to the analog switch cap register.
                                        (0124)     ; 2) Write the inital value to CR0
                                        (0125)     ; 3) Setup the Analog Synchronization Control Register so that the next
                                        (0126)     ;    six "or" commands work with the SAR hardware to perform a conversion.
                                        (0127) 
057A: 62 65 01 MOV   REG[0x65],0x1      (0128)     mov  reg[ASY_CR],ASY_CR_SYNCEN
057D: 62 84 A0 MOV   REG[0x84],0xA0     (0129)     mov  reg[SAR6_sun_CR0], SAR6_sun_CR0_INIT
0580: 62 65 6A MOV   REG[0x65],0x6A     (0130)     mov  reg[ASY_CR], PSOC_SAR_CTRL | SAR6_sun_SCCOL_MASK
                                        (0131) 
                                        (0132) 
                                        (0133)     ;; Drive the binary search engine with read/modify/write instructions.
                                        (0134)     ;; NOTE: each of the next 6 instructions stalls the CPU consuming one
                                        (0135)     ;; complete analog column clock cycle (input clock divided by 4).
0583: 43 84 00 OR    REG[0x84],0x0      (0136)     or   reg[SAR6_sun_CR0], 0   ; set sign & try MSB of magnitude
0586: 43 84 00 OR    REG[0x84],0x0      (0137)     or   reg[SAR6_sun_CR0], 0   ; set MSB of magnitude and try next lower
0589: 43 84 00 OR    REG[0x84],0x0      (0138)     or   reg[SAR6_sun_CR0], 0   ;                      ... and next ...
058C: 43 84 00 OR    REG[0x84],0x0      (0139)     or   reg[SAR6_sun_CR0], 0   ;                      ... and next ...
058F: 43 84 00 OR    REG[0x84],0x0      (0140)     or   reg[SAR6_sun_CR0], 0   ;                      ... and try LSB
0592: 43 84 00 OR    REG[0x84],0x0      (0141)     or   reg[SAR6_sun_CR0], 0   ; and, finally, set LSB of magnitude.
                                        (0142) 
                                        (0143)     ;; Conversion is done, translate the result to 1-byte 2's complement form.
                                        (0144)     ;; Negative and positive values are handled differently. To minimize
                                        (0145)     ;; aperature jitter, the execution cycles consumed in each case have been
                                        (0146)     ;; equalized. The cost of this is 13 cycles for positive values; 5 cycles
                                        (0147)     ;; for negative values.
0595: 5D 84    MOV   A,REG[0x84]        (0148)     mov  A, reg[SAR6_sun_CR0]
0597: 21 1F    AND   A,0x1F             (0149)     and  A, PSOC_SAR_MAGNITUDE
0599: 49 84 20 TST   REG[0x84],0x20     (0150)     tst  reg[SAR6_sun_CR0], PSOC_SAR_SIGN
059C: B0 03    JNZ   0x05A0             (0151)     jnz  GSNegative  ; Result is zero => sign was 1 (negative).
059E: 40       NOP                      (0152)     nop              ; Delay to equalize number of required cycles.
                                        (0153)     RAM_EPILOGUE RAM_USE_CLASS_1
059F: 7F       RET                      (0154)     ret
                                        (0155) GSNegative:
05A0: 73       CPL   A                  (0156)     cpl  A           ; Take 1's complement of the magnitude
                                        (0157)     RAM_EPILOGUE RAM_USE_CLASS_1
05A1: 7F       RET                      (0158)     ret
                                        (0159) .ENDSECTION
                                        (0160) 
                                        (0161) .SECTION
                                        (0162) ;-----------------------------------------------------------------------------
                                        (0163) ;  FUNCTION NAME: SAR6_sun_Stop
                                        (0164) ;
                                        (0165) ;  DESCRIPTION:
                                        (0166) ;    Removes power from the switch cap block
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:  None
                                        (0171) ;
                                        (0172) ;  RETURNS: NA
                                        (0173) ;
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  SAR6_sun_Stop:
                                        (0182) _SAR6_sun_Stop:
                                        (0183)     RAM_PROLOGUE RAM_USE_CLASS_1
05A2: 41 87 FC AND   REG[0x87],0xFC     (0184)     and reg[SAR6_sun_CR3], ~bPWRMASK
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1
05A5: 7F       RET                      (0186)     ret
                                        (0187) .ENDSECTION
                                        (0188) 
                                        (0189) ; End of File SAR6_sun.asm
FILE: lib\pga_sun.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_sun.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/3/2 at 9:15:6
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_sun.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_sun_Start
                                        (0060) export _PGA_sun_Start
                                        (0061) export  PGA_sun_SetPower
                                        (0062) export _PGA_sun_SetPower
                                        (0063) 
                                        (0064) export  PGA_sun_SetGain
                                        (0065) export _PGA_sun_SetGain
                                        (0066) 
                                        (0067) export  PGA_sun_Stop
                                        (0068) export _PGA_sun_Stop
                                        (0069) 
                                        (0070) IF (PGA_sun_AGNDBUFAPI)
                                        (0071) export  PGA_sun_EnableAGNDBuffer
                                        (0072) export _PGA_sun_EnableAGNDBuffer
                                        (0073) export  PGA_sun_DisableAGNDBuffer
                                        (0074) export _PGA_sun_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_sun_Start
                                        (0092) ;  FUNCTION NAME: PGA_sun_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_sun_Start:
                                        (0111) _PGA_sun_Start:
                                        (0112)  PGA_sun_SetPower:
                                        (0113) _PGA_sun_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
05A6: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
05A8: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
05A9: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
05AA: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_sun_GAIN_CR2]                           ; read power value
05AC: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
05AE: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
05B0: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_sun_GAIN_CR2], A                      ; move complete value back to register
05B2: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
05B3: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_sun_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_sun_SetGain:
                                        (0154) _PGA_sun_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
05B4: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
05B6: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
05B7: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
05B8: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_sun_GAIN_CR0]                           ; read mux settings
05BA: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
05BC: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
05BF: B0 0A    JNZ   0x05CA             (0164)    jnz  .SETHIGHGAIN
05C1: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_sun_GAIN_CR3],~EXGAIN                      ; Clear High Gain bit.
05C4: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05C6: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_sun_GAIN_CR0], A                           ; move complete value back to register
05C8: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
05C9: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
05CA: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05CD: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
05CF: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_sun_GAIN_CR0], A                           ; move complete value back to register
05D1: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_sun_GAIN_CR3], EXGAIN                      ; Set High Gain bit.
05D4: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
05D5: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_sun_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_sun_Stop:
                                        (0203) _PGA_sun_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
05D6: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_sun_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
05D9: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_sun_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_sun_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_sun_EnableAGNDBuffer:
                                        (0233) _PGA_sun_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_sun_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_sun_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_sun_DisableAGNDBuffer:
                                        (0261) _PGA_sun_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_sun_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_sun.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/3/2 at 9:14:48
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
05DA: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
05DB: 10       PUSH  X                  (0209)     push  X
05DC: 28       ROMX                     (0210)     romx                               ; Get character from ROM
05DD: B0 04    JNZ   0x05E2             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
05DF: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
05E0: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
05E1: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
05E2: 90 3C    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
05E4: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
05E5: 18       POP   A                  (0220)     pop   A
05E6: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
05E7: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
05E9: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
05EA: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
05FC: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
05FD: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
05FE: 67       ASR   A                  (0262)     asr   A
05FF: 67       ASR   A                  (0263)     asr   A
0600: 67       ASR   A                  (0264)     asr   A
0601: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0603: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0605: 90 19    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0607: 18       POP   A                  (0268)     pop   A                            ; Restore value
0608: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
060A: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
060C: 90 12    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
060E: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
060F: 4B       SWAP  A,X                (0305)     swap  A,X
0610: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0612: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0613: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0615: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0616: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0618: A0 06    JZ    0x061F             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
061A: 90 04    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
061C: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
061D: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
061F: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0620: 90 5F    CALL  0x0681             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0622: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0623: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0624: 67       ASR   A                  (0390)     asr   A
0625: 67       ASR   A                  (0391)     asr   A
0626: 67       ASR   A                  (0392)     asr   A
0627: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0629: 90 38    CALL  0x0663             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
062B: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
062C: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
062E: 40       NOP                      (0397)     nop
062F: 40       NOP                      (0398)     nop
0630: 40       NOP                      (0399)     nop
0631: 90 30    CALL  0x0663             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0633: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0634: 90 4B    CALL  0x0681             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0636: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0637: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0638: 67       ASR   A                  (0436)     asr   A
0639: 67       ASR   A                  (0437)     asr   A
063A: 67       ASR   A                  (0438)     asr   A
063B: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
063D: 90 09    CALL  0x0648             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
063F: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0640: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0642: 40       NOP                      (0443)     nop
0643: 40       NOP                      (0444)     nop
0644: 40       NOP                      (0445)     nop
0645: 90 01    CALL  0x0648             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0647: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0648: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0649: 26 11 80 AND   [0x11],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
064C: 51 11    MOV   A,[0x11]           (0480)     mov   A,[Port_2_Data_SHADE]
064E: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0650: 18       POP   A                  (0483)     pop   A
0651: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0653: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0655: 2A 11    OR    A,[0x11]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0657: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0659: 53 11    MOV   [0x11],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
065B: 40       NOP                      (0489)     nop
065C: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
065E: 53 11    MOV   [0x11],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0660: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0662: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0663: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0664: 26 11 80 AND   [0x11],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0667: 2E 11 20 OR    [0x11],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
066A: 51 11    MOV   A,[0x11]           (0527)     mov   A,[Port_2_Data_SHADE]
066C: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
066E: 18       POP   A                  (0530)     pop   A
066F: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0671: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0673: 2A 11    OR    A,[0x11]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0675: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0677: 53 11    MOV   [0x11],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0679: 40       NOP                      (0536)     NOP
067A: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
067C: 53 11    MOV   [0x11],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
067E: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0680: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0681: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0682: 26 11 80 AND   [0x11],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0685: 51 11    MOV   A,[0x11]           (0574)     mov   A,[Port_2_Data_SHADE]
0687: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0689: 26 14 F0 AND   [0x14],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
068C: 51 14    MOV   A,[0x14]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
068E: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0690: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0692: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0694: 2E 11 40 OR    [0x11],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0697: 51 11    MOV   A,[0x11]           (0584)     mov   A,[Port_2_Data_SHADE]
0699: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
069B: 40       NOP                      (0586)     NOP
                                        (0587) 
069C: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
069D: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
069F: 2E 11 50 OR    [0x11],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
06A2: 51 11    MOV   A,[0x11]           (0593)     mov   A,[Port_2_Data_SHADE]
06A4: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
06A6: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
06A7: 40       NOP                      (0597)     nop
06A8: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
06AA: 08       PUSH  A                  (0610)     push  A
06AB: 26 11 C0 AND   [0x11],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
06AE: 51 11    MOV   A,[0x11]           (0612)     mov   A,[Port_2_Data_SHADE]
06B0: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
06B2: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
06B3: 40       NOP                      (0616)     nop                                    ; fastest PSoC
06B4: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
06B5: 2E 11 50 OR    [0x11],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
06B8: 51 11    MOV   A,[0x11]           (0620)     mov   A,[Port_2_Data_SHADE]
06BA: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
06BC: 40       NOP                      (0623)     nop
06BD: 40       NOP                      (0624)     nop
                                        (0625) 
06BE: 26 11 C0 AND   [0x11],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
06C1: 51 11    MOV   A,[0x11]           (0627)     mov   A,[Port_2_Data_SHADE]
06C3: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
06C5: 18       POP   A                  (0630)     pop   A
06C6: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
06C8: A0 04    JZ    0x06CD             (0633)     jz    .UNLOCK
06CA: 79       DEC   X                  (0634)     dec   X
06CB: BF D3    JNZ   0x069F             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
06CD: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
06CE: 2E 14 7F OR    [0x14],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
06D1: 51 14    MOV   A,[0x14]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
06D3: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
06D5: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
06D7: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
06D9: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
06DA: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
06DB: 26 14 80 AND   [0x14],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
06DE: 2E 14 7F OR    [0x14],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
06E1: 26 15 80 AND   [0x15],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
06E4: 51 14    MOV   A,[0x14]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
06E6: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
06E8: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
06EA: 51 15    MOV   A,[0x15]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
06EC: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
06EE: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
06F0: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06F2: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
06F4: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06F6: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
06F8: 50 03    MOV   A,0x3              (0701)     mov   A,03h
06FA: 9F 4C    CALL  0x0648             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
06FC: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
06FE: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0700: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0702: 9F 44    CALL  0x0648             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0704: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0706: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0708: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
070A: 50 03    MOV   A,0x3              (0714)     mov   A,03h
070C: 9F 3A    CALL  0x0648             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
070E: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0710: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0712: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0714: 9F 32    CALL  0x0648             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0716: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0718: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
071A: 50 08    MOV   A,0x8              (0726)     mov   A,08h
071C: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
071E: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0720: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0722: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0724: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0726: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0728: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
072A: 50 06    MOV   A,0x6              (0736)     mov   A,06h
072C: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
072E: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0730: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0732: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0734: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0736: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0738: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
073A: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
073C: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
073E: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0740: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0742: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0744: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0746: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
074B: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
074D: 10       PUSH  X                  (0791)     push  X                            ; Store COL
074E: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0750: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0751: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0753: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0754: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0756: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0757: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0759: 78       DEC   A                  (0828)     dec   A
075A: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
075C: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0765: 08       PUSH  A                  (0871)     push  A
0766: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0768: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
076A: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
076C: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
076E: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0770: D0 06    JNC   0x0777             (0877)     jnc   .Delay50u_End
0772: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0774: 78       DEC   A                  (0880)     dec   A                              ; [4]
0775: BF FE    JNZ   0x0774             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0777: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0778: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0779: 10       PUSH  X                  (0943)     push  X
077A: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
077C: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
077E: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
077F: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0782: B0 05    JNZ   0x0788             (0950)     jnz   .LCD_CHECK1X
0784: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0786: 80 11    JMP   0x0798             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0788: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
078B: D0 07    JNC   0x0793             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
078D: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
078F: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0791: 80 06    JMP   0x0798             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0793: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0795: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0798: 9E 86    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
079A: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
079C: BF E2    JNZ   0x077F             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
079E: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
079F: 4F       MOV   X,SP               (1015)     mov   X, SP
07A0: 10       PUSH  X                  (1016)     push  X
07A1: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
07A3: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
07A5: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
07A7: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
07A8: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
07AB: B0 05    JNZ   0x07B1             (1026)     jnz   .LCD_CHECK1
07AD: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
07AF: 80 11    JMP   0x07C1             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
07B1: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
07B4: D0 07    JNC   0x07BC             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
07B6: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
07B8: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
07BA: 80 06    JMP   0x07C1             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
07BC: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
07BE: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
07C1: 9E 5D    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
07C3: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
07C5: BF E2    JNZ   0x07A8             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
07C7: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
07C8: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
07CA: 08       PUSH  A                  (1098)     push  A
07CB: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
07CD: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
07CF: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
07D1: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
07D4: B0 05    JNZ   0x07DA             (1103)     jnz   .VBG_NZ_SEGX
07D6: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
07D8: 80 13    JMP   0x07EC             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
07DA: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
07DD: D0 09    JNC   0x07E7             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
07DF: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
07E1: 78       DEC   A                  (1111)     dec   A
07E2: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
07E5: 80 06    JMP   0x07EC             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
07E7: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
07EA: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
07EC: 9E 32    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
07EE: 18       POP   A                  (1121)     pop   A
07EF: 78       DEC   A                  (1122)     dec   A
07F0: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
07F2: BF D7    JNZ   0x07CA             (1124)     jnz   .VBG_LOOPX
07F4: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
07F5: 4F       MOV   X,SP               (1168)     mov   X, SP
07F6: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
07F8: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
07FA: 08       PUSH  A                  (1172)     push  A
07FB: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
07FD: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
07FF: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0801: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0804: B0 05    JNZ   0x080A             (1177)     jnz   .VBG_NZ_SEG
0806: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0808: 80 13    JMP   0x081C             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
080A: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
080D: D0 09    JNC   0x0817             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
080F: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0811: 78       DEC   A                  (1185)     dec   A
0812: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0815: 80 06    JMP   0x081C             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0817: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
081A: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
081C: 9E 02    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
081E: 18       POP   A                  (1195)     pop   A
081F: 78       DEC   A                  (1196)     dec   A
0820: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0822: BF D7    JNZ   0x07FA             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0824: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0825: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0826: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0827: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0828: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
082A: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
082C: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
082F: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0832: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0834: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0836: D0 05    JNC   0x083C             (1251)     jnc   .VBG_SOLID
0838: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
083A: 80 03    JMP   0x083E             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
083C: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
083E: 9D E0    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0840: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0842: BF EF    JNZ   0x0832             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0844: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0846: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0849: BF E5    JNZ   0x082F             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
084B: 18       POP   A                  (1264)     pop  A
084C: 18       POP   A                  (1265)     pop  A
084D: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
084F: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0851: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0860: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0861: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0863: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0865: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0867: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0869: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
086C: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
086F: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0871: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0874: B0 05    JNZ   0x087A             (1332)     jnz   .BG_OTHER
0876: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0878: 80 03    JMP   0x087C             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
087A: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
087C: 9D A2    CALL  LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|_LCD_WriteData(1338)     call  LCD_WriteData
087E: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0880: BF EE    JNZ   0x086F             (1340)     jnz   .BG_Loop2
0882: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0884: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0887: BF E4    JNZ   0x086C             (1343)     jnz   .BG_Loop1
                                        (1344) 
0889: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
088B: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
088D: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
088F: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // Ports:
(0003) // P0_0 = MCLK
(0004) // P0_1 = XCLR adc reset
(0005) // P0_2 = Button SW
(0006) // P0_3 = windspeed input
(0007) // P0_4 = rainsensor input
(0008) // P0_5 = sunlight (solar) input
(0009) // P0_6 = I2C SDA
(0010) // P0_7 = I2C SCL
(0011) // P1_0 = Gray Code
(0012) // P1_1 = Gray Code
(0013) // P1_1 = Gray Code
(0014) // P2 = LCD
(0015) //----------------------------------------------------------------------------
(0016) 
(0017) #define LCD_LENGTH 16 // 16 plus \0 termination?
(0018) 
(0019) #include <m8c.h>        // part specific constants and macros
(0020) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0021) #include <stdio.h>
(0022) 
(0023) #include "sunsensor.h"
(0024) /*
(0025) typedef enum {
(0026) 	overview = 0,
(0027) 	temp = 1,
(0028) 	humidity = 2,
(0029) 	rain = 3,
(0030) 	wind = 4,
(0031) } MODE;*/
(0032) 
(0033) void main(void)
(0034) {
__UserModules_end|_main|__text_start|_main:
  lcdSecondLine        --> X+18
  lcdFirstLine         --> X+2
  displaymode          --> X+0
    0890: 10       PUSH  X
    0891: 4F       MOV   X,SP
    0892: 38 22    ADD   SP,0x22
(0035) 	//Variables
(0036) 	char lcdFirstLine[LCD_LENGTH], lcdSecondLine[LCD_LENGTH];
(0037) 	unsigned int displaymode = 3; // FIXME: sollte 0 sein!
    0894: 56 01 03 MOV   [X+1],0x3
    0897: 56 00 00 MOV   [X+0],0x0
(0038) 	
(0039) 	/** init **/
(0040) 	
(0041) 	// interrupt and SleepTimer init
(0042) 	M8C_EnableGInt ;                            // Turn on interrupts
    089A: 71 01    OR    F,0x1
(0043) 	SleepTimer_Start();
    089C: 10       PUSH  X
    089D: 7C 04 FE LCALL _SleepTimer_Start
(0044)     SleepTimer_SetInterval(SleepTimer_8_HZ);    // Set interrupt to a
    08A0: 50 10    MOV   A,0x10
    08A2: 7C 05 10 LCALL _SleepTimer_SetInterval
(0045)     SleepTimer_EnableInt();                     // 8 Hz rate
    08A5: 7C 04 F6 LCALL _SleepTimer_EnableInt
(0046) 	
(0047) 	// init PGA and SAR6 for sun and rain sensor
(0048) 	PGA_sun_SetGain(PGA_sun_G4_00);  // gain of 4
    08A8: 50 38    MOV   A,0x38
    08AA: 7C 05 B4 LCALL _PGA_sun_SetGain
(0049)     PGA_sun_Start(PGA_sun_MEDPOWER);
    08AD: 50 02    MOV   A,0x2
    08AF: 7C 05 A6 LCALL _PGA_sun_SetPower|PGA_sun_Start|_PGA_sun_Start
(0050) 	//PGA_rain_SetGain(PGA_rain_G8_00);
(0051)     //PGA_rain_Start(PGA_rain_MEDPOWER);
(0052) 	SAR6_sun_Start(SAR6_sun_MEDPOWER);
    08B2: 50 02    MOV   A,0x2
    08B4: 7C 05 6C LCALL _SAR6_sun_SetPower|SAR6_sun_Start|SAR6_sun_SetPower|_SAR6_sun_Start
(0053) 	//SAR6_rain_Start(SAR6_sun_MEDPOWER);
(0054) 
(0055) 	// LCD init
(0056) 	LCD_Init();
    08B7: 7C 06 DB LCALL _LCD_Start|LCD_Init|_LCD_Init
    08BA: 20       POP   X
(0057) 	
(0058) 	// print welcome screen to LCD
(0059) 	csprintf(lcdFirstLine,"   Welcome to   ");
    08BB: 50 01    MOV   A,0x1
    08BD: 08       PUSH  A
    08BE: 50 83    MOV   A,0x83
    08C0: 08       PUSH  A
    08C1: 5A 07    MOV   [__r1],X
    08C3: 06 07 02 ADD   [__r1],0x2
    08C6: 51 08    MOV   A,[__r0]
    08C8: 08       PUSH  A
    08C9: 51 07    MOV   A,[__r1]
    08CB: 08       PUSH  A
    08CC: 7C 0D 9B LCALL _csprintf
(0060) 	csprintf(lcdSecondLine, " Weatherstation ");
    08CF: 50 01    MOV   A,0x1
    08D1: 08       PUSH  A
    08D2: 50 72    MOV   A,0x72
    08D4: 08       PUSH  A
    08D5: 5A 07    MOV   [__r1],X
    08D7: 06 07 12 ADD   [__r1],0x12
    08DA: 51 08    MOV   A,[__r0]
    08DC: 08       PUSH  A
    08DD: 51 07    MOV   A,[__r1]
    08DF: 08       PUSH  A
    08E0: 7C 0D 9B LCALL _csprintf
    08E3: 38 F8    ADD   SP,0xF8
(0061) 	LCD_Position(0,0);
    08E5: 10       PUSH  X
    08E6: 50 00    MOV   A,0x0
    08E8: 57 00    MOV   X,0x0
    08EA: 7C 07 4B LCALL _LCD_Position
    08ED: 20       POP   X
(0062) 	LCD_PrString(lcdFirstLine);
    08EE: 5A 07    MOV   [__r1],X
    08F0: 06 07 02 ADD   [__r1],0x2
    08F3: 10       PUSH  X
    08F4: 51 08    MOV   A,[__r0]
    08F6: 08       PUSH  A
    08F7: 51 07    MOV   A,[__r1]
    08F9: 5C       MOV   X,A
    08FA: 18       POP   A
    08FB: 7C 06 16 LCALL _LCD_PrString
(0063) 	LCD_Position(1,0);
    08FE: 57 00    MOV   X,0x0
    0900: 50 01    MOV   A,0x1
    0902: 7C 07 4B LCALL _LCD_Position
    0905: 20       POP   X
(0064) 	LCD_PrString(lcdSecondLine);
    0906: 5A 07    MOV   [__r1],X
    0908: 06 07 12 ADD   [__r1],0x12
    090B: 10       PUSH  X
    090C: 51 08    MOV   A,[__r0]
    090E: 08       PUSH  A
    090F: 51 07    MOV   A,[__r1]
    0911: 5C       MOV   X,A
    0912: 18       POP   A
    0913: 7C 06 16 LCALL _LCD_PrString
    0916: 20       POP   X
    0917: 80 BB    JMP   0x09D3
(0065) 	
(0066) 	while(1) {
(0067) 		// get temp and humidity here
(0068) 		
(0069) 		switch(displaymode) {
    0919: 3D 00 00 CMP   [X+0],0x0
    091C: B0 06    JNZ   0x0923
    091E: 3D 01 00 CMP   [X+1],0x0
    0921: A0 78    JZ    0x099A
    0923: 3D 00 00 CMP   [X+0],0x0
    0926: B0 06    JNZ   0x092D
    0928: 3D 01 01 CMP   [X+1],0x1
    092B: A0 6E    JZ    0x099A
    092D: 3D 00 00 CMP   [X+0],0x0
    0930: B0 06    JNZ   0x0937
    0932: 3D 01 02 CMP   [X+1],0x2
    0935: A0 64    JZ    0x099A
    0937: 3D 00 00 CMP   [X+0],0x0
    093A: B0 06    JNZ   0x0941
    093C: 3D 01 03 CMP   [X+1],0x3
    093F: A0 0D    JZ    0x094D
    0941: 3D 00 00 CMP   [X+0],0x0
    0944: B0 06    JNZ   0x094B
    0946: 3D 01 04 CMP   [X+1],0x4
    0949: A0 50    JZ    0x099A
    094B: 80 1E    JMP   0x096A
(0070) 			case 0:
(0071) 				// overview();
(0072) 				break;
(0073) 				
(0074) 			case 1:
(0075) 				// temp();
(0076) 				break;
(0077) 				
(0078) 			case 2:
(0079) 				// humidity();
(0080) 				break;
(0081) 				
(0082) 			case 3:
(0083) 				sunsensor(lcdFirstLine, lcdSecondLine);
    094D: 5A 07    MOV   [__r1],X
    094F: 06 07 12 ADD   [__r1],0x12
    0952: 51 08    MOV   A,[__r0]
    0954: 08       PUSH  A
    0955: 51 07    MOV   A,[__r1]
    0957: 08       PUSH  A
    0958: 5A 07    MOV   [__r1],X
    095A: 06 07 02 ADD   [__r1],0x2
    095D: 51 08    MOV   A,[__r0]
    095F: 08       PUSH  A
    0960: 51 07    MOV   A,[__r1]
    0962: 08       PUSH  A
    0963: 7C 09 DA LCALL _sunsensor
    0966: 38 FC    ADD   SP,0xFC
(0084) 				break;
    0968: 80 31    JMP   0x099A
(0085) 				
(0086) 			case 4:
(0087) 				// wind();
(0088) 				break;
(0089) 		
(0090) 			default:
(0091) 				displaymode = 0;
    096A: 56 01 00 MOV   [X+1],0x0
    096D: 56 00 00 MOV   [X+0],0x0
(0092) 				csprintf(lcdFirstLine,"     Error      ");
    0970: 50 01    MOV   A,0x1
    0972: 08       PUSH  A
    0973: 50 61    MOV   A,0x61
    0975: 08       PUSH  A
    0976: 5A 07    MOV   [__r1],X
    0978: 06 07 02 ADD   [__r1],0x2
    097B: 51 08    MOV   A,[__r0]
    097D: 08       PUSH  A
    097E: 51 07    MOV   A,[__r1]
    0980: 08       PUSH  A
    0981: 7C 0D 9B LCALL _csprintf
(0093) 				csprintf(lcdSecondLine,"                ");
    0984: 50 01    MOV   A,0x1
    0986: 08       PUSH  A
    0987: 50 50    MOV   A,0x50
    0989: 08       PUSH  A
    098A: 5A 07    MOV   [__r1],X
    098C: 06 07 12 ADD   [__r1],0x12
    098F: 51 08    MOV   A,[__r0]
    0991: 08       PUSH  A
    0992: 51 07    MOV   A,[__r1]
    0994: 08       PUSH  A
    0995: 7C 0D 9B LCALL _csprintf
    0998: 38 F8    ADD   SP,0xF8
(0094) 		}
(0095) 		
(0096) 		// lets see what we've got
(0097) 		LCD_Position(0,0);
    099A: 10       PUSH  X
    099B: 50 00    MOV   A,0x0
    099D: 57 00    MOV   X,0x0
    099F: 7C 07 4B LCALL _LCD_Position
    09A2: 20       POP   X
(0098) 		LCD_PrString(lcdFirstLine);
    09A3: 5A 07    MOV   [__r1],X
    09A5: 06 07 02 ADD   [__r1],0x2
    09A8: 10       PUSH  X
    09A9: 51 08    MOV   A,[__r0]
    09AB: 08       PUSH  A
    09AC: 51 07    MOV   A,[__r1]
    09AE: 5C       MOV   X,A
    09AF: 18       POP   A
    09B0: 7C 06 16 LCALL _LCD_PrString
(0099) 		LCD_Position(1,0);
    09B3: 57 00    MOV   X,0x0
    09B5: 50 01    MOV   A,0x1
    09B7: 7C 07 4B LCALL _LCD_Position
    09BA: 20       POP   X
(0100) 		LCD_PrString(lcdSecondLine);
    09BB: 5A 07    MOV   [__r1],X
    09BD: 06 07 12 ADD   [__r1],0x12
    09C0: 10       PUSH  X
    09C1: 51 08    MOV   A,[__r0]
    09C3: 08       PUSH  A
    09C4: 51 07    MOV   A,[__r1]
    09C6: 5C       MOV   X,A
    09C7: 18       POP   A
    09C8: 7C 06 16 LCALL _LCD_PrString
(0101) 		
(0102) 		// lets sleep for a while
(0103) 		SleepTimer_SyncWait(8, SleepTimer_WAIT_RELOAD);
    09CB: 57 00    MOV   X,0x0
    09CD: 50 08    MOV   A,0x8
    09CF: 7C 05 31 LCALL _SleepTimer_SyncWait
    09D2: 20       POP   X
(0104) 	}
    09D3: 8F 45    JMP   0x0919
(0105) }
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\sunsensor.c
(0001) #include "PSoCAPI.h"
(0002) #include <stdio.h>
(0003) #include <stdlib.h>
(0004) 
(0005) void sunsensor(char *firstLine, char *secondLine) {
_sunsensor:
  sampleAsChar         --> X+1
  sample               --> X+0
  secondLine           --> X-7
  firstLine            --> X-5
    09DA: 10       PUSH  X
    09DB: 4F       MOV   X,SP
    09DC: 38 03    ADD   SP,0x3
(0006) 	char sample, sampleAsChar[2];
(0007) 	
(0008) 	/*
(0009) 	csprintf(firstLine, "subsensor       ");
(0010) 	LCD_Position(0,0);
(0011) 	LCD_PrString(firstLine);
(0012) 	*/
(0013) 	sample = SAR6_sun_cGetSample();
    09DE: 10       PUSH  X
    09DF: 7C 05 7A LCALL _SAR6_sun_GetSample|_SAR6_sun_cGetSample|SAR6_sun_GetSample|SAR6_sun_cGetSample
    09E2: 20       POP   X
    09E3: 54 00    MOV   [X+0],A
(0014) 	itoa(sampleAsChar, sample, 10);
    09E5: 50 00    MOV   A,0x0
    09E7: 08       PUSH  A
    09E8: 50 0A    MOV   A,0xA
    09EA: 08       PUSH  A
    09EB: 52 00    MOV   A,[X+0]
    09ED: 53 07    MOV   [__r1],A
    09EF: 50 00    MOV   A,0x0
    09F1: 08       PUSH  A
    09F2: 51 07    MOV   A,[__r1]
    09F4: 08       PUSH  A
    09F5: 5A 07    MOV   [__r1],X
    09F7: 06 07 01 ADD   [__r1],0x1
    09FA: 50 00    MOV   A,0x0
    09FC: 08       PUSH  A
    09FD: 51 07    MOV   A,[__r1]
    09FF: 08       PUSH  A
    0A00: 7C 0A 77 LCALL _itoa
    0A03: 38 FA    ADD   SP,0xFA
(0015) 	
(0016) 	csprintf(firstLine, "Sun and rain    ");
    0A05: 50 01    MOV   A,0x1
    0A07: 08       PUSH  A
    0A08: 50 9B    MOV   A,0x9B
    0A0A: 08       PUSH  A
    0A0B: 52 FB    MOV   A,[X-5]
    0A0D: 08       PUSH  A
    0A0E: 52 FC    MOV   A,[X-4]
    0A10: 08       PUSH  A
    0A11: 7C 0D 9B LCALL _csprintf
(0017) 	csprintf(secondLine, "%c adc", sampleAsChar);
    0A14: 5A 07    MOV   [__r1],X
    0A16: 06 07 01 ADD   [__r1],0x1
    0A19: 51 08    MOV   A,[__r0]
    0A1B: 08       PUSH  A
    0A1C: 51 07    MOV   A,[__r1]
    0A1E: 08       PUSH  A
    0A1F: 50 01    MOV   A,0x1
    0A21: 08       PUSH  A
    0A22: 50 94    MOV   A,0x94
    0A24: 08       PUSH  A
    0A25: 52 F9    MOV   A,[X-7]
    0A27: 08       PUSH  A
    0A28: 52 FA    MOV   A,[X-6]
    0A2A: 08       PUSH  A
    0A2B: 7C 0D 9B LCALL _csprintf
    0A2E: 38 F6    ADD   SP,0xF6
    0A30: 38 FD    ADD   SP,0xFD
    0A32: 20       POP   X
    0A33: 7F       RET   
