FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 01    MOV   A,0x1              (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 93 LCALL 0x0293             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 00 01 MOV   [__r0],0x1         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 00 01 CMP   [__r0],0x1         (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 00    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 CE    MOV   X,0xCE             (0368)     mov  X,<__idata_start
00AC: 55 00 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 00 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 00    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 00 MOV   REG[0xE0],0x0      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 02 F1 LCALL __text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
01CE: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_weather_station_Bank1
                                        (0006) export LoadConfigTBL_weather_station_Bank0
                                        (0007) export LoadConfigTBL_weather_station_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_weather_station_Bank0:
                                        (0010) ;  Instance name I2Cm_1, User Module I2Cm
                                        (0011) ;  Instance name LCD_1, User Module LCD
                                        (0012) ;  Instance name PGA_rain, User Module PGA
                                        (0013) ;       Instance name PGA_rain, Block Name GAIN(ACB02)
                                        (0014) 	db		79h, 0eh		;PGA_rain_GAIN_CR0(ACB02CR0)
                                        (0015) 	db		7ah, 21h		;PGA_rain_GAIN_CR1(ACB02CR1)
                                        (0016) 	db		7bh, 20h		;PGA_rain_GAIN_CR2(ACB02CR2)
                                        (0017) 	db		78h, 00h		;PGA_rain_GAIN_CR3(ACB02CR3)
                                        (0018) ;  Instance name PGA_sun, User Module PGA
                                        (0019) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0020) 	db		75h, 0eh		;PGA_sun_GAIN_CR0(ACB01CR0)
                                        (0021) 	db		76h, 21h		;PGA_sun_GAIN_CR1(ACB01CR1)
                                        (0022) 	db		77h, 20h		;PGA_sun_GAIN_CR2(ACB01CR2)
                                        (0023) 	db		74h, 00h		;PGA_sun_GAIN_CR3(ACB01CR3)
                                        (0024) ;  Instance name PGA_wind, User Module PGA
                                        (0025) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0026) 	db		71h, 0eh		;PGA_wind_GAIN_CR0(ACB00CR0)
                                        (0027) 	db		72h, 21h		;PGA_wind_GAIN_CR1(ACB00CR1)
                                        (0028) 	db		73h, 20h		;PGA_wind_GAIN_CR2(ACB00CR2)
                                        (0029) 	db		70h, 00h		;PGA_wind_GAIN_CR3(ACB00CR3)
                                        (0030) ;  Instance name SAR6_rain, User Module SAR6
                                        (0031) ;       Instance name SAR6_rain, Block Name SA(ASC12)
                                        (0032) 	db		88h, 00h		;SAR6_rain_CR0(ASC12CR0)
                                        (0033) 	db		89h, 5fh		;SAR6_rain_CR1(ASC12CR1)
                                        (0034) 	db		8ah, 60h		;SAR6_rain_CR2(ASC12CR2)
                                        (0035) 	db		8bh, 00h		;SAR6_rain_CR3(ASC12CR3)
                                        (0036) ;  Instance name SAR6_sun, User Module SAR6
                                        (0037) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0038) 	db		84h, 00h		;SAR6_sun_CR0(ASD11CR0)
                                        (0039) 	db		85h, 9fh		;SAR6_sun_CR1(ASD11CR1)
                                        (0040) 	db		86h, 60h		;SAR6_sun_CR2(ASD11CR2)
                                        (0041) 	db		87h, 0ch		;SAR6_sun_CR3(ASD11CR3)
                                        (0042) ;  Instance name SAR6_wind, User Module SAR6
                                        (0043) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0044) 	db		80h, 00h		;SAR6_wind_CR0(ASC10CR0)
                                        (0045) 	db		81h, 5fh		;SAR6_wind_CR1(ASC10CR1)
                                        (0046) 	db		82h, 60h		;SAR6_wind_CR2(ASC10CR2)
                                        (0047) 	db		83h, 00h		;SAR6_wind_CR3(ASC10CR3)
                                        (0048) ;  Global Register values Bank 0
                                        (0049) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0050) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0051) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0052) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0053) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0054) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0055) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0056) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0057) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0058) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0059) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0060) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0061) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0062) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0063) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0064) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0065) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0066) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0067) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0068) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0069) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0070) 	db		ffh
                                        (0071) LoadConfigTBL_weather_station_Bank1:
                                        (0072) ;  Instance name I2Cm_1, User Module I2Cm
                                        (0073) ;  Instance name LCD_1, User Module LCD
                                        (0074) ;  Instance name PGA_rain, User Module PGA
                                        (0075) ;       Instance name PGA_rain, Block Name GAIN(ACB02)
                                        (0076) ;  Instance name PGA_sun, User Module PGA
                                        (0077) ;       Instance name PGA_sun, Block Name GAIN(ACB01)
                                        (0078) ;  Instance name PGA_wind, User Module PGA
                                        (0079) ;       Instance name PGA_wind, Block Name GAIN(ACB00)
                                        (0080) ;  Instance name SAR6_rain, User Module SAR6
                                        (0081) ;       Instance name SAR6_rain, Block Name SA(ASC12)
                                        (0082) ;  Instance name SAR6_sun, User Module SAR6
                                        (0083) ;       Instance name SAR6_sun, Block Name SA(ASD11)
                                        (0084) ;  Instance name SAR6_wind, User Module SAR6
                                        (0085) ;       Instance name SAR6_wind, Block Name SA(ASC10)
                                        (0086) ;  Global Register values Bank 1
                                        (0087) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0088) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0089) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0090) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0091) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0092) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0093) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0094) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0095) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0096) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0097) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0098) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0099) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0100) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0101) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0102) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0103) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0104) 	db		ffh
                                        (0105) AREA psoc_config(rom, rel)
                                        (0106) LoadConfigTBL_weather_station_Ordered:
                                        (0107) ;  Ordered Global Register values
                                        (0108) 	M8C_SetBank0
01D0: 62 00 00 MOV   REG[0x0],0x0       (0109) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01D3: 71 10    OR    F,0x10             
                                        (0110) 	M8C_SetBank1
01D5: 62 00 03 MOV   REG[0x0],0x3       (0111) 	mov	reg[00h], 03h		; Port_0_DriveMode_0 register (PRT0DM0)
01D8: 62 01 FC MOV   REG[0x1],0xFC      (0112) 	mov	reg[01h], fch		; Port_0_DriveMode_1 register (PRT0DM1)
01DB: 70 EF    AND   F,0xEF             
                                        (0113) 	M8C_SetBank0
01DD: 62 03 FC MOV   REG[0x3],0xFC      (0114) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
01E0: 62 02 00 MOV   REG[0x2],0x0       (0115) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01E3: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
01E5: 62 02 00 MOV   REG[0x2],0x0       (0117) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01E8: 62 03 00 MOV   REG[0x3],0x0       (0118) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01EB: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
01ED: 62 01 00 MOV   REG[0x1],0x0       (0120) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01F0: 62 04 00 MOV   REG[0x4],0x0       (0121) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01F3: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
01F5: 62 04 00 MOV   REG[0x4],0x0       (0123) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01F8: 62 05 FF MOV   REG[0x5],0xFF      (0124) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
01FB: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
01FD: 62 07 FF MOV   REG[0x7],0xFF      (0126) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0200: 62 06 00 MOV   REG[0x6],0x0       (0127) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0203: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
0205: 62 06 00 MOV   REG[0x6],0x0       (0129) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0208: 62 07 00 MOV   REG[0x7],0x0       (0130) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
020B: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
020D: 62 05 00 MOV   REG[0x5],0x0       (0132) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0210: 62 08 00 MOV   REG[0x8],0x0       (0133) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0213: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
0215: 62 08 00 MOV   REG[0x8],0x0       (0135) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0218: 62 09 FF MOV   REG[0x9],0xFF      (0136) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
021B: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
021D: 62 0B FF MOV   REG[0xB],0xFF      (0138) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0220: 62 0A 00 MOV   REG[0xA],0x0       (0139) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0223: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0225: 62 0A 00 MOV   REG[0xA],0x0       (0141) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0228: 62 0B 00 MOV   REG[0xB],0x0       (0142) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
022B: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
022D: 62 09 00 MOV   REG[0x9],0x0       (0144) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0230: 62 0C 00 MOV   REG[0xC],0x0       (0145) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0233: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0235: 62 0C 00 MOV   REG[0xC],0x0       (0147) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0238: 62 0D 00 MOV   REG[0xD],0x0       (0148) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
023B: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
023D: 62 0F 00 MOV   REG[0xF],0x0       (0150) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0240: 62 0E 00 MOV   REG[0xE],0x0       (0151) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0243: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
0245: 62 0E 00 MOV   REG[0xE],0x0       (0153) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0248: 62 0F 00 MOV   REG[0xF],0x0       (0154) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
024B: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
024D: 62 0D 00 MOV   REG[0xD],0x0       (0156) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0250: 62 10 00 MOV   REG[0x10],0x0      (0157) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0253: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0255: 62 10 00 MOV   REG[0x10],0x0      (0159) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0258: 62 11 00 MOV   REG[0x11],0x0      (0160) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
025B: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
025D: 62 13 00 MOV   REG[0x13],0x0      (0162) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0260: 62 12 00 MOV   REG[0x12],0x0      (0163) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0263: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
0265: 62 12 00 MOV   REG[0x12],0x0      (0165) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0268: 62 13 00 MOV   REG[0x13],0x0      (0166) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
026B: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
026D: 62 11 00 MOV   REG[0x11],0x0      (0168) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0270: 62 14 00 MOV   REG[0x14],0x0      (0169) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0273: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0275: 62 14 00 MOV   REG[0x14],0x0      (0171) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0278: 62 15 00 MOV   REG[0x15],0x0      (0172) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
027B: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
027D: 62 17 00 MOV   REG[0x17],0x0      (0174) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0280: 62 16 00 MOV   REG[0x16],0x0      (0175) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0283: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
0285: 62 16 00 MOV   REG[0x16],0x0      (0177) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0288: 62 17 00 MOV   REG[0x17],0x0      (0178) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
028B: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
028D: 62 15 00 MOV   REG[0x15],0x0      (0180) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0290: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
0292: 7F       RET                      (0182) 	ret
                                        (0183) 
                                        (0184) 
                                        (0185) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_weather_station
                                        (0026) export _LoadConfig_weather_station
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0293: 7C 02 9A LCALL 0x029A             (0058) 	lcall	LoadConfig_weather_station
0296: 7C 01 CE LCALL 0x01CE             (0059) 	lcall	LoadConfigTBL_weather_station_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0299: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration weather_station
                                        (0067) ;
                                        (0068) ;    Load configuration registers for weather_station.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_weather_station:
                                        (0085)  LoadConfig_weather_station:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
029A: 10       PUSH  X                  (0088) 	push	x
029B: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
029D: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
029F: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
02A0: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_weather_station_Bank0
02A2: 57 50    MOV   X,0x50             (0094)     mov     X, <LoadConfigTBL_weather_station_Bank0
02A4: 7C 02 B5 LCALL 0x02B5             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
02A7: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
02A9: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
02AA: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_weather_station_Bank1
02AC: 57 AB    MOV   X,0xAB             (0101)     mov     X, <LoadConfigTBL_weather_station_Bank1
02AE: 7C 02 B5 LCALL 0x02B5             (0102)     lcall   LoadConfig              ; Load the bank 1 values
02B1: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
02B3: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
02B4: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
02B5: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
02B7: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
02B8: 08       PUSH  A                  (0132)     push    A
02B9: 4F       MOV   X,SP               (0133)     mov     X, SP
02BA: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
02BD: D0 04    JNC   0x02C2             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02BF: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
02C2: 18       POP   A                  (0138)     pop     A
02C3: 20       POP   X                  (0139)     pop     X
02C4: 70 EF    AND   F,0xEF             
02C6: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02C9: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
02CA: 08       PUSH  A                  (0145)     push    A
02CB: 28       ROMX                     (0146)     romx                            ; Load register address from table
02CC: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
02CE: A0 1F    JZ    0x02EE             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
02D0: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
02D1: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
02D4: A0 03    JZ    0x02D8             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02D6: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
02D8: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
02DA: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
02DB: 20       POP   X                  (0156)     pop     X
02DC: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
02DD: 09 00    ADC   A,0x0              (0158)     adc     A, 0
02DF: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
02E0: 08       PUSH  A                  (0160)     push    A
02E1: 28       ROMX                     (0161)     romx                            ; load config data from the table
02E2: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
02E3: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
02E5: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
02E7: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
02E8: 20       POP   X                  (0166)     pop     X
02E9: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
02EA: 09 00    ADC   A,0x0              (0168)     adc     A, 0
02EC: 8F D7    JMP   0x02C4             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
02EE: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
02F0: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: C:\Users\MATHIA~1\DOCUME~1\PSOCDE~1.2PR\WEATHE~1\WEATHE~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) // Ports:
(0004) // P0_0 = MCLK
(0005) // P0_1 = XCLR adc reset
(0006) // P0_2 = Button SW
(0007) // P0_3 = windspeed input
(0008) // P0_4 = rainsensor input
(0009) // P0_5 = sunlight (solar) input
(0010) // P0_6 = I2C
(0011) // P0_7 = I2C
(0012) // P1_0 = Gray Code
(0013) // P1_1 = Gray Code
(0014) // P1_1 = Gray Code
(0015) // P2 = LCD
(0016) //----------------------------------------------------------------------------
(0017) 
(0018) #include <m8c.h>        // part specific constants and macros
(0019) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0020) 
(0021) 
(0022) void main(void)
(0023) {
__text_start|_main|_main:
    02F1: 8F FF    JMP   __text_start|_main|_main
(0024) 	// M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0025) 	// Insert your main routine code here.
(0026) }
